/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rivetlogic.ghangouts.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.rivetlogic.ghangouts.model.HangoutsGroup;
import com.rivetlogic.ghangouts.model.HangoutsGroupModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the HangoutsGroup service. Represents a row in the &quot;rivetlogic_hangouts_HangoutsGroup&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link HangoutsGroupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HangoutsGroupImpl}.
 * </p>
 *
 * @author Rivet Logic
 * @see HangoutsGroupImpl
 * @see HangoutsGroup
 * @see HangoutsGroupModel
 * @generated
 */
@ProviderType
public class HangoutsGroupModelImpl extends BaseModelImpl<HangoutsGroup>
	implements HangoutsGroupModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a hangouts group model instance should use the {@link HangoutsGroup} interface instead.
	 */
	public static final String TABLE_NAME = "rivetlogic_hangouts_HangoutsGroup";
	public static final Object[][] TABLE_COLUMNS = {
			{ "hangoutsGroupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "groupName", Types.VARCHAR },
			{ "hangoutsContacts", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("hangoutsGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("groupName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("hangoutsContacts", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table rivetlogic_hangouts_HangoutsGroup (hangoutsGroupId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,groupName VARCHAR(75) null,hangoutsContacts VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table rivetlogic_hangouts_HangoutsGroup";
	public static final String ORDER_BY_JPQL = " ORDER BY hangoutsGroup.modifiedDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rivetlogic_hangouts_HangoutsGroup.modifiedDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ghangouts.service.com.rivetlogic.ghangouts.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rivetlogic.ghangouts.model.HangoutsGroup"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ghangouts.service.com.rivetlogic.ghangouts.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rivetlogic.ghangouts.model.HangoutsGroup"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ghangouts.service.com.rivetlogic.ghangouts.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rivetlogic.ghangouts.model.HangoutsGroup"),
			true);
	public static final long GROUPNAME_COLUMN_BITMASK = 1L;
	public static final long USERID_COLUMN_BITMASK = 2L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ghangouts.service.com.rivetlogic.ghangouts.service.util.ServiceProps.get(
				"lock.expiration.time.com.rivetlogic.ghangouts.model.HangoutsGroup"));

	public HangoutsGroupModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _hangoutsGroupId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHangoutsGroupId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _hangoutsGroupId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return HangoutsGroup.class;
	}

	@Override
	public String getModelClassName() {
		return HangoutsGroup.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("hangoutsGroupId", getHangoutsGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("groupName", getGroupName());
		attributes.put("hangoutsContacts", getHangoutsContacts());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long hangoutsGroupId = (Long)attributes.get("hangoutsGroupId");

		if (hangoutsGroupId != null) {
			setHangoutsGroupId(hangoutsGroupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String groupName = (String)attributes.get("groupName");

		if (groupName != null) {
			setGroupName(groupName);
		}

		String hangoutsContacts = (String)attributes.get("hangoutsContacts");

		if (hangoutsContacts != null) {
			setHangoutsContacts(hangoutsContacts);
		}
	}

	@Override
	public long getHangoutsGroupId() {
		return _hangoutsGroupId;
	}

	@Override
	public void setHangoutsGroupId(long hangoutsGroupId) {
		_hangoutsGroupId = hangoutsGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getGroupName() {
		if (_groupName == null) {
			return StringPool.BLANK;
		}
		else {
			return _groupName;
		}
	}

	@Override
	public void setGroupName(String groupName) {
		_columnBitmask |= GROUPNAME_COLUMN_BITMASK;

		if (_originalGroupName == null) {
			_originalGroupName = _groupName;
		}

		_groupName = groupName;
	}

	public String getOriginalGroupName() {
		return GetterUtil.getString(_originalGroupName);
	}

	@JSON
	@Override
	public String getHangoutsContacts() {
		if (_hangoutsContacts == null) {
			return StringPool.BLANK;
		}
		else {
			return _hangoutsContacts;
		}
	}

	@Override
	public void setHangoutsContacts(String hangoutsContacts) {
		_hangoutsContacts = hangoutsContacts;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			HangoutsGroup.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public HangoutsGroup toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (HangoutsGroup)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HangoutsGroupImpl hangoutsGroupImpl = new HangoutsGroupImpl();

		hangoutsGroupImpl.setHangoutsGroupId(getHangoutsGroupId());
		hangoutsGroupImpl.setUserId(getUserId());
		hangoutsGroupImpl.setUserName(getUserName());
		hangoutsGroupImpl.setCreateDate(getCreateDate());
		hangoutsGroupImpl.setModifiedDate(getModifiedDate());
		hangoutsGroupImpl.setGroupName(getGroupName());
		hangoutsGroupImpl.setHangoutsContacts(getHangoutsContacts());

		hangoutsGroupImpl.resetOriginalValues();

		return hangoutsGroupImpl;
	}

	@Override
	public int compareTo(HangoutsGroup hangoutsGroup) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				hangoutsGroup.getModifiedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof HangoutsGroup)) {
			return false;
		}

		HangoutsGroup hangoutsGroup = (HangoutsGroup)obj;

		long primaryKey = hangoutsGroup.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		HangoutsGroupModelImpl hangoutsGroupModelImpl = this;

		hangoutsGroupModelImpl._originalUserId = hangoutsGroupModelImpl._userId;

		hangoutsGroupModelImpl._setOriginalUserId = false;

		hangoutsGroupModelImpl._setModifiedDate = false;

		hangoutsGroupModelImpl._originalGroupName = hangoutsGroupModelImpl._groupName;

		hangoutsGroupModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<HangoutsGroup> toCacheModel() {
		HangoutsGroupCacheModel hangoutsGroupCacheModel = new HangoutsGroupCacheModel();

		hangoutsGroupCacheModel.hangoutsGroupId = getHangoutsGroupId();

		hangoutsGroupCacheModel.userId = getUserId();

		hangoutsGroupCacheModel.userName = getUserName();

		String userName = hangoutsGroupCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			hangoutsGroupCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			hangoutsGroupCacheModel.createDate = createDate.getTime();
		}
		else {
			hangoutsGroupCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			hangoutsGroupCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			hangoutsGroupCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		hangoutsGroupCacheModel.groupName = getGroupName();

		String groupName = hangoutsGroupCacheModel.groupName;

		if ((groupName != null) && (groupName.length() == 0)) {
			hangoutsGroupCacheModel.groupName = null;
		}

		hangoutsGroupCacheModel.hangoutsContacts = getHangoutsContacts();

		String hangoutsContacts = hangoutsGroupCacheModel.hangoutsContacts;

		if ((hangoutsContacts != null) && (hangoutsContacts.length() == 0)) {
			hangoutsGroupCacheModel.hangoutsContacts = null;
		}

		return hangoutsGroupCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{hangoutsGroupId=");
		sb.append(getHangoutsGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", groupName=");
		sb.append(getGroupName());
		sb.append(", hangoutsContacts=");
		sb.append(getHangoutsContacts());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.rivetlogic.ghangouts.model.HangoutsGroup");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>hangoutsGroupId</column-name><column-value><![CDATA[");
		sb.append(getHangoutsGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupName</column-name><column-value><![CDATA[");
		sb.append(getGroupName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hangoutsContacts</column-name><column-value><![CDATA[");
		sb.append(getHangoutsContacts());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = HangoutsGroup.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			HangoutsGroup.class
		};
	private long _hangoutsGroupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _groupName;
	private String _originalGroupName;
	private String _hangoutsContacts;
	private long _columnBitmask;
	private HangoutsGroup _escapedModel;
}